// vim:ft=groovy
//apply plugin: 'c'
apply plugin: 'com.cisco.external-build'
apply plugin: 'maven-publish'

buildscript {
    repositories {
       mavenLocal()
       mavenCentral()
       jcenter()
    }

    dependencies {
        classpath group: 'com.cisco.gradle', name: 'external-build', version: '1.15'
    }
}

repositories {
    mavenLocal()
}

group = 'com.maxocull'
version = '0.0.2'
description = 'Some farm fresh eggs to make a cake with'

import com.cisco.gradle.externalbuild.ExternalNativeLibrarySpec
import com.cisco.gradle.externalbuild.ExternalNativeExecutableSpec
import com.cisco.gradle.externalbuild.tasks.GnuMake

def getIntermediateDir = { binary ->
    file("${buildDir}/external-build/${binary.component.name}/${binary.targetPlatform.name}")
}

def getInstallDir = { binary ->
    file("${buildDir}/install/${binary.component.name}/${binary.targetPlatform.name}")
}

model {
    components {
        eggs(ExternalNativeLibrarySpec) {
            buildConfig(GnuMake) {
                def intDir = getIntermediateDir(binary)
                def outputDir = getInstallDir(binary)

                // Uncomment for easier debugging
                redirectOutput = false

                makefile 'Makefile'
                targets 'all', 'install'

                requiredIncludes.add('include/eggs.h')
                inputs.dir 'src'
                inputs.file 'Makefile'

                outputs.dir outputDir

                workingDir intDir
                environment = [
                    'PATH': toolChainPath,
                    'OUTPUT_DIR': outputDir,
                    'EXTERNAL_LIBRARIES': requiredLibraries.join(' '),
                    'EXTERNAL_INCLUDES': requiredIncludes.join(' '),
                ]
            }

            buildOutput {
                def outputDir = getInstallDir(binary)
                outputFile = file("${outputDir}/eggs.so")
                //outputFile = file("${outputDir}/eggs.a")

                exportedHeaders {
                    srcDir "include"
                }
            }
        }
    }
}
